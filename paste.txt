-- ============================================
-- AUTENTICAÇÃO - ATUALIZAÇÃO DO SCHEMA
-- Execute no Supabase SQL Editor
-- ============================================

-- 1. Adicionar coluna user_id nas tabelas existentes
ALTER TABLE students ADD COLUMN user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE;
ALTER TABLE exercises ADD COLUMN user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE;

-- 2. Criar índices para performance
CREATE INDEX idx_students_user_id ON students(user_id);
CREATE INDEX idx_exercises_user_id ON exercises(user_id);

-- 3. Atualizar políticas RLS - REMOVER as antigas primeiro
DROP POLICY IF EXISTS "Allow all operations on students" ON students;
DROP POLICY IF EXISTS "Allow all operations on exercises" ON exercises;
DROP POLICY IF EXISTS "Allow all operations on workout_plans" ON workout_plans;
DROP POLICY IF EXISTS "Allow all operations on workout_exercises" ON workout_exercises;
DROP POLICY IF EXISTS "Allow all operations on assessments" ON assessments;
DROP POLICY IF EXISTS "Allow all operations on progress_photos" ON progress_photos;

-- 4. Criar políticas RLS restritivas

-- STUDENTS - usuários só veem suas próprias alunas
CREATE POLICY "Users can only see their own students" ON students
    FOR ALL USING (auth.uid() = user_id);

-- EXERCISES - usuários veem exercícios próprios + públicos
CREATE POLICY "Users can see public and own exercises" ON exercises
    FOR SELECT USING (user_id IS NULL OR auth.uid() = user_id);

CREATE POLICY "Users can manage own exercises" ON exercises
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own exercises" ON exercises
    FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can delete own exercises" ON exercises
    FOR DELETE USING (auth.uid() = user_id);

-- WORKOUT PLANS - através da relação com students
CREATE POLICY "Users can manage workout plans for their students" ON workout_plans
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM students 
            WHERE students.id = workout_plans.student_id 
            AND students.user_id = auth.uid()
        )
    );

-- WORKOUT EXERCISES - através da relação com workout_plans
CREATE POLICY "Users can manage workout exercises for their plans" ON workout_exercises
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM workout_plans 
            JOIN students ON students.id = workout_plans.student_id
            WHERE workout_plans.id = workout_exercises.workout_plan_id 
            AND students.user_id = auth.uid()
        )
    );

-- ASSESSMENTS - através da relação com students
CREATE POLICY "Users can manage assessments for their students" ON assessments
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM students 
            WHERE students.id = assessments.student_id 
            AND students.user_id = auth.uid()
        )
    );

-- PROGRESS PHOTOS - através da relação com students
CREATE POLICY "Users can manage photos for their students" ON progress_photos
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM students 
            WHERE students.id = progress_photos.student_id 
            AND students.user_id = auth.uid()
        )
    );

-- 5. Política para Storage
CREATE POLICY "Users can upload photos for their students" ON storage.objects
    FOR INSERT WITH CHECK (
        bucket_id = 'progress-photos' AND
        EXISTS (
            SELECT 1 FROM students 
            WHERE students.user_id = auth.uid()
            AND (storage.foldername(name))[1] = students.id::text
        )
    );

-- 6. Função para popular exercícios públicos (executar uma vez)
INSERT INTO exercises (name, muscle_group, equipment, instructions, difficulty, user_id) 
SELECT name, muscle_group, equipment, instructions, difficulty, NULL
FROM exercises 
WHERE user_id IS NOT NULL
ON CONFLICT DO NOTHING;
