-- ============================================
-- MK Training App - Database Schema
-- Execute este script no Supabase SQL Editor
-- ============================================

-- Drop existing tables if they exist (for clean setup)
DROP TABLE IF EXISTS progress_photos CASCADE;
DROP TABLE IF EXISTS assessments CASCADE;
DROP TABLE IF EXISTS workout_exercises CASCADE;
DROP TABLE IF EXISTS workout_plans CASCADE;
DROP TABLE IF EXISTS exercises CASCADE;
DROP TABLE IF EXISTS students CASCADE;

-- Drop existing types if they exist
DROP TYPE IF EXISTS difficulty_level CASCADE;
DROP TYPE IF EXISTS plan_type CASCADE;
DROP TYPE IF EXISTS photo_type CASCADE;

-- Create custom types
CREATE TYPE difficulty_level AS ENUM ('beginner', 'intermediate', 'advanced');
CREATE TYPE plan_type AS ENUM ('basic', 'premium', 'vip');
CREATE TYPE photo_type AS ENUM ('front', 'back', 'side');

-- ============================================
-- STUDENTS TABLE
-- ============================================
CREATE TABLE students (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    phone VARCHAR(20) NOT NULL,
    birth_date DATE NOT NULL,
    height DECIMAL(5,2) NOT NULL CHECK (height > 0),
    weight DECIMAL(5,2) NOT NULL CHECK (weight > 0),
    goal TEXT NOT NULL,
    plan plan_type DEFAULT 'basic',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ============================================
-- EXERCISES TABLE
-- ============================================
CREATE TABLE exercises (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    muscle_group VARCHAR(100) NOT NULL,
    equipment VARCHAR(100) NOT NULL,
    instructions TEXT NOT NULL,
    difficulty difficulty_level DEFAULT 'beginner',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ============================================
-- WORKOUT PLANS TABLE
-- ============================================
CREATE TABLE workout_plans (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    student_id UUID NOT NULL REFERENCES students(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ============================================
-- WORKOUT EXERCISES TABLE (Junction table)
-- ============================================
CREATE TABLE workout_exercises (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    workout_plan_id UUID NOT NULL REFERENCES workout_plans(id) ON DELETE CASCADE,
    exercise_id UUID NOT NULL REFERENCES exercises(id) ON DELETE CASCADE,
    sets INTEGER NOT NULL CHECK (sets > 0),
    reps VARCHAR(50) NOT NULL, -- Allows formats like "12-15", "10", "AMRAP"
    weight DECIMAL(5,2) DEFAULT 0 CHECK (weight >= 0),
    rest_time INTEGER DEFAULT 60, -- seconds
    notes TEXT,
    order_index INTEGER NOT NULL DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ============================================
-- ASSESSMENTS TABLE
-- ============================================
CREATE TABLE assessments (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    student_id UUID NOT NULL REFERENCES students(id) ON DELETE CASCADE,
    date DATE NOT NULL,
    weight DECIMAL(5,2) NOT NULL CHECK (weight > 0),
    body_fat DECIMAL(5,2) DEFAULT 0 CHECK (body_fat >= 0 AND body_fat <= 100),
    muscle_mass DECIMAL(5,2) DEFAULT 0 CHECK (muscle_mass >= 0),
    measurements JSONB NOT NULL DEFAULT '{"chest": 0, "waist": 0, "hip": 0, "arm": 0, "thigh": 0}',
    notes TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ============================================
-- PROGRESS PHOTOS TABLE
-- ============================================
CREATE TABLE progress_photos (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    student_id UUID NOT NULL REFERENCES students(id) ON DELETE CASCADE,
    url TEXT NOT NULL,
    date DATE NOT NULL,
    type photo_type NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ============================================
-- INDEXES FOR PERFORMANCE
-- ============================================
CREATE INDEX idx_students_email ON students(email);
CREATE INDEX idx_students_name ON students(name);
CREATE INDEX idx_exercises_muscle_group ON exercises(muscle_group);
CREATE INDEX idx_exercises_difficulty ON exercises(difficulty);
CREATE INDEX idx_workout_plans_student_id ON workout_plans(student_id);
CREATE INDEX idx_workout_exercises_workout_plan_id ON workout_exercises(workout_plan_id);
CREATE INDEX idx_workout_exercises_exercise_id ON workout_exercises(exercise_id);
CREATE INDEX idx_assessments_student_id ON assessments(student_id);
CREATE INDEX idx_assessments_date ON assessments(date);
CREATE INDEX idx_progress_photos_student_id ON progress_photos(student_id);
CREATE INDEX idx_progress_photos_date ON progress_photos(date);

-- ============================================
-- TRIGGERS FOR UPDATED_AT
-- ============================================
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$ language 'plpgsql';

CREATE TRIGGER update_students_updated_at 
    BEFORE UPDATE ON students 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_workout_plans_updated_at 
    BEFORE UPDATE ON workout_plans 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- ============================================
-- ROW LEVEL SECURITY (RLS) POLICIES
-- ============================================
ALTER TABLE students ENABLE ROW LEVEL SECURITY;
ALTER TABLE exercises ENABLE ROW LEVEL SECURITY;
ALTER TABLE workout_plans ENABLE ROW LEVEL SECURITY;
ALTER TABLE workout_exercises ENABLE ROW LEVEL SECURITY;
ALTER TABLE assessments ENABLE ROW LEVEL SECURITY;
ALTER TABLE progress_photos ENABLE ROW LEVEL SECURITY;

-- Allow public access for now (you can modify these policies later)
CREATE POLICY "Allow all operations on students" ON students FOR ALL USING (true);
CREATE POLICY "Allow all operations on exercises" ON exercises FOR ALL USING (true);
CREATE POLICY "Allow all operations on workout_plans" ON workout_plans FOR ALL USING (true);
CREATE POLICY "Allow all operations on workout_exercises" ON workout_exercises FOR ALL USING (true);
CREATE POLICY "Allow all operations on assessments" ON assessments FOR ALL USING (true);
CREATE POLICY "Allow all operations on progress_photos" ON progress_photos FOR ALL USING (true);

-- ============================================
-- STORAGE BUCKET FOR PROGRESS PHOTOS
-- ============================================
INSERT INTO storage.buckets (id, name, public) 
VALUES ('progress-photos', 'progress-photos', true)
ON CONFLICT (id) DO NOTHING;

-- Storage policy for progress photos
CREATE POLICY "Allow public uploads on progress-photos bucket" 
ON storage.objects FOR INSERT 
WITH CHECK (bucket_id = 'progress-photos');

CREATE POLICY "Allow public access to progress-photos bucket" 
ON storage.objects FOR SELECT 
USING (bucket_id = 'progress-photos');

CREATE POLICY "Allow public deletes on progress-photos bucket" 
ON storage.objects FOR DELETE 
USING (bucket_id = 'progress-photos');

-- ============================================
-- SAMPLE DATA (Optional - Remove if not needed)
-- ============================================

-- Sample exercises
INSERT INTO exercises (name, muscle_group, equipment, instructions, difficulty) VALUES
('Supino Reto', 'Peito', 'Barra', 'Deite no banco, posicione a barra na altura do peito, desça controladamente e empurre para cima.', 'intermediate'),
('Agachamento', 'Pernas', 'Barra', 'Posicione a barra nas costas, desça mantendo as costas retas até formar 90 graus com as pernas.', 'beginner'),
('Desenvolvimento', 'Ombros', 'Halteres', 'Sentada ou em pé, levante os halteres acima da cabeça, controlando o movimento.', 'intermediate'),
('Remada Curvada', 'Costas', 'Barra', 'Incline o tronco para frente, puxe a barra em direção ao abdômen.', 'intermediate'),
('Rosca Direta', 'Bíceps', 'Barra', 'Em pé, flexione os cotovelos levando a barra em direção ao peito.', 'beginner'),
('Tríceps Testa', 'Tríceps', 'Barra W', 'Deitada, flexione apenas os cotovelos, levando a barra em direção à testa.', 'beginner'),
('Prancha', 'Core', 'Peso Corporal', 'Mantenha o corpo reto apoiado nos antebraços e pontas dos pés.', 'beginner'),
('Burpee', 'Corpo Todo', 'Peso Corporal', 'Agachamento, prancha, flexão, salto. Movimento explosivo completo.', 'advanced'),
('Leg Press', 'Pernas', 'Máquina', 'Sentada na máquina, empurre a plataforma com as pernas mantendo a postura.', 'beginner'),
('Puxada Frontal', 'Costas', 'Polia', 'Sentada, puxe a barra em direção ao peito, contraindo as costas.', 'intermediate');

-- Sample student
INSERT INTO students (name, email, phone, birth_date, height, weight, goal, plan) VALUES
('Maria Silva', 'maria.silva@email.com', '(11) 99999-9999', '1990-05-15', 165.0, 60.0, 'Perder peso e ganhar condicionamento físico', 'premium');

-- ============================================
-- VERIFICATION QUERIES
-- ============================================
-- Verify tables were created
SELECT 'Setup completed successfully!' as status;
SELECT table_name FROM information_schema.tables 
WHERE table_schema = 'public' 
AND table_name IN ('students', 'exercises', 'workout_plans', 'workout_exercises', 'assessments', 'progress_photos')
ORDER BY table_name;

-- Verify sample data
SELECT 'Sample data loaded:' as info;
SELECT COUNT(*) as exercise_count FROM exercises;
SELECT COUNT(*) as student_count FROM students;
